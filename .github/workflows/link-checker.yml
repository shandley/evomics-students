name: Link Checker

on:
  schedule:
    # Run weekly on Sunday at 4 AM UTC
    - cron: '0 4 * * 0'
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'src/data/**'

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  link-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Check links
      run: node scripts/checkLinks.cjs
      
    - name: Generate link report
      run: node scripts/generateLinkReport.cjs
      
    - name: Upload link report
      uses: actions/upload-artifact@v4
      with:
        name: link-report
        path: reports/link-report.json
        retention-days: 30
        
    - name: Create or update broken links issue
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          try {
            const reportPath = 'reports/link-report.json';
            
            if (!fs.existsSync(reportPath)) {
              console.log('‚ö†Ô∏è Link report not found');
              return;
            }
            
            const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
            const brokenLinks = report.links?.filter(link => link.status === 'broken') || [];
            const warningLinks = report.links?.filter(link => link.status === 'warning') || [];
            
            const timestamp = new Date().toLocaleString('en-US', { 
              timeZone: 'UTC',
              year: 'numeric',
              month: 'short', 
              day: 'numeric',
              hour: '2-digit',
              minute: '2-digit',
              timeZoneName: 'short'
            });
            
            // Find existing broken links issue
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'broken-links',
              state: 'open'
            });
            
            const existingIssue = issues.find(issue => 
              issue.title.includes('Broken Links Found')
            );
            
            if (brokenLinks.length === 0 && warningLinks.length === 0) {
              // Close existing issue if no broken links
              if (existingIssue) {
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: existingIssue.number,
                  state: 'closed',
                  body: `## ‚úÖ All Links Working\n\n**Last checked:** ${timestamp}\n\nAll institutional and workshop links are now working properly. This issue has been automatically resolved.\n\n### Summary Statistics\n- **Total Links:** ${report.summary?.totalLinks || 0}\n- **Working Links:** ${report.summary?.workingLinks || 0}\n- **Success Rate:** ${(report.summary?.successRate || 0).toFixed(1)}%`
                });
              }
              console.log('‚úÖ No broken links found');
              return;
            }
            
            // Create issue body
            let issueBody = `## üîó Broken Links Detection Report\n\n`;
            issueBody += `**Generated:** ${timestamp}\n`;
            issueBody += `**Total Links Checked:** ${report.summary?.totalLinks || 0}\n`;
            issueBody += `**Success Rate:** ${(report.summary?.successRate || 0).toFixed(1)}%\n\n`;
            
            if (brokenLinks.length > 0) {
              issueBody += `### üö® Broken Links (${brokenLinks.length})\n\n`;
              
              brokenLinks.forEach(link => {
                issueBody += `**${link.url}**\n`;
                issueBody += `- Status Code: ${link.statusCode || 'N/A'}\n`;
                issueBody += `- Error: ${link.error || 'Unknown error'}\n`;
                issueBody += `- Type: ${link.type || 'Unknown'}\n`;
                if (link.studentId) {
                  issueBody += `- Student ID: ${link.studentId}\n`;
                }
                if (link.institutionName) {
                  issueBody += `- Institution: ${link.institutionName}\n`;
                }
                issueBody += `\n`;
              });
            }
            
            if (warningLinks.length > 0) {
              issueBody += `### ‚ö†Ô∏è Warning Links (${warningLinks.length})\n\n`;
              
              warningLinks.forEach(link => {
                issueBody += `**${link.url}**\n`;
                issueBody += `- Status Code: ${link.statusCode || 'N/A'}\n`;
                issueBody += `- Issue: ${link.error || 'Unknown warning'}\n`;
                issueBody += `- Type: ${link.type || 'Unknown'}\n`;
                if (link.studentId) {
                  issueBody += `- Student ID: ${link.studentId}\n`;
                }
                if (link.institutionName) {
                  issueBody += `- Institution: ${link.institutionName}\n`;
                }
                issueBody += `\n`;
              });
            }
            
            issueBody += `### üìä Summary Statistics\n\n`;
            issueBody += `- **Total Links:** ${report.summary?.totalLinks || 0}\n`;
            issueBody += `- **Working Links:** ${report.summary?.workingLinks || 0}\n`;
            issueBody += `- **Broken Links:** ${report.summary?.brokenLinks || 0}\n`;
            issueBody += `- **Warning Links:** ${report.summary?.warningLinks || 0}\n`;
            issueBody += `- **Success Rate:** ${(report.summary?.successRate || 0).toFixed(1)}%\n`;
            issueBody += `- **Strict Success Rate:** ${(report.summary?.strictSuccessRate || 0).toFixed(1)}%\n\n`;
            
            issueBody += `---\n*This report is automatically generated. Links are checked for institutional websites, workshop references, and other external resources in student data.*`;
            
            const issueTitle = `Broken Links Found - ${brokenLinks.length} broken, ${warningLinks.length} warnings`;
            
            if (existingIssue) {
              // Update existing issue
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                title: issueTitle,
                body: issueBody,
                labels: ['broken-links', 'automated', 'maintenance']
              });
              console.log(`üìù Updated existing issue #${existingIssue.number}`);
            } else {
              // Create new issue
              const { data: newIssue } = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: issueBody,
                labels: ['broken-links', 'automated', 'maintenance']
              });
              console.log(`üìù Created new issue #${newIssue.number}`);
            }
            
          } catch (error) {
            console.error('Error processing link report:', error);
            
            // Create error issue
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Link Checker Failed',
              body: `## ‚ùå Link Checker Error\n\n**Error:** ${error.message}\n\n**Timestamp:** ${new Date().toISOString()}\n\nThe link checker workflow failed to process the link report. Please check the workflow logs for more details.`,
              labels: ['broken-links', 'automated', 'error']
            });
          }
          
    - name: Check site accessibility
      run: |
        echo "üåê Checking site accessibility..."
        if curl -f -s --max-time 30 "https://shandley.github.io/evomics-students/" > /dev/null; then
          echo "‚úÖ Site is accessible"
        else
          echo "‚ùå Site is not accessible"
          exit 1
        fi
        
    - name: Display link check summary
      run: |
        if [ -f "reports/link-report.json" ]; then
          echo "üìä Link Check Summary:"
          node -e "
            const report = require('./reports/link-report.json');
            console.log(\`Total Links: \${report.summary?.totalLinks || 0}\`);
            console.log(\`Working Links: \${report.summary?.workingLinks || 0}\`);
            console.log(\`Broken Links: \${report.summary?.brokenLinks || 0}\`);
            console.log(\`Warning Links: \${report.summary?.warningLinks || 0}\`);
            console.log(\`Success Rate: \${(report.summary?.successRate || 0).toFixed(1)}%\`);
          "
        else
          echo "‚ö†Ô∏è Link report not found"
        fi